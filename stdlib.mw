:: retry pure
	-- nothing
;;
:: skip pure
	get_word()
;;

:: $ pure
	-- TODO: call "cooldown" before executing a recovery word!!!
	function length(x)
		return table.getn(x)
	end
	function block(start_delim, end_delim, ...)
		local include_delim = true
		if arg[1] == false then
			include_delim = false
		end
		local block = {}
		local len
		if include_delim then
			block[1] = start_delim
			len = 1
		else
			len = 0
		end
		local depth = 1
		while true do
			local word = get_word()
			if word == end_delim then
				depth = depth - 1
		    end
			if word == start_delim and start_delim ~= end_delim then
				depth = depth + 1
		    end
			len = len + 1
			block[len] = word
			if depth == 0 then
				break
			end
		end
		if not include_delim then
			block[len] = nil
		end
		return block
	end
	function unget_block(block)
		local len = length(block)
		while len > 0 do
			unget_word(block[len])
			len = len - 1
		end
	end
	function unget_block_body(block)
		local len = length(block)-1
		while len > 1 do
			unget_word(block[len])
			len = len - 1
		end
	end
;; $
:: { pure
	push(block("{","}"))
;;

:: : pure
	local name = get_word()
	local body = block(":",";", false)
	dictionary[name] = { type="moonwalk", body=body, recovery="pure" }
;;


:: $ pure
	function set_success(b)
		success = b
	end
;; $
:: success pure
	set_success(true)
;;
:: failure pure
  set_success(false)
;;
:: success? pure
	push(success)
;;

:: print retry
	print(pop())
;;
:: " pure
	-- TODO: get raw word here to avoid skipping over whitespace
	local block = block('"','"', false)
	local string = ""
	for i,v in ipairs(block) do
		string = string..v.." "
	end
	string = string:sub(1,-2)
	push(string)
;;

:: add pure
	push(pop()+pop())
;;
:: mul pure
	push(pop()*pop())
;;
:: sub pure
	local y = pop()
	local x = pop()
	push(x-y)
;;
:: div pure
	local y = pop()
	local x = pop()
	push(x/y)
;;
:: = pure
	push(pop() == pop())
;;
:: # pure
	push(deserialize(get_word()))
;;

:: times pure
	local iterations = pop()
	local block = pop()
	if iterations > 0 then
		unget_word("times")
		unget_word(serialize(iterations-1))
		unget_word("#")
		unget_block(block)
		unget_block_body(block)
	end
;;
: inf # 1 # 0 div ;
: forever inf times ;
: once # 1 times ;
: call once ;

:: dup pure
	local x = pop()
	push(x)
	push(x)
;;
:: del pure
	pop()
;;
:: swap pure
	local x = pop()
	local y = pop()
	push(x)
	push(y)
;;
:: over pure
	local x = pop()
	local y = pop()
	push(y)
	push(x)
	push(y)
;;

:: true pure
	push(true)
;;
:: false pure
	push(false)
;;
:: not pure
  push(not pop())
;;

:: ifelse pure
	local else_case = pop()
	local if_case = pop()
	local bool = pop()
	local selected
	if bool then
		selected = if_case
	else
		selected = else_case
	end
	unget_block_body(selected)
;;
: if { } ifelse ;

:: cooldown skip
	sleep(1)
;;

:: concat pure
	local b = pop()
	local a = pop()
	unget_word("}")
	unget_block_body(b)
	unget_block_body(a)
	unget_word("{")
;;

:: quote pure
	local x = pop()
	unget_word("}")
	unget_word(serialize(x))
	unget_word("#")
	unget_word("{")
;;

: quote_concat swap quote swap concat ;

: force_success dup call success? { del } { cooldown force_success } ifelse ;

:: read_line retry
 local line = io.stdin:read()
 push(line)
;;

:: eval_line pure
 local code = parse(pop())
 local i = table.getn(code)
 while i>0 do
  unget_word(code[i])
  i = i - 1
 end
;;

: repl read_line eval_line repl ;

:: crash skip
	if os.exit then
		os.exit()
	else
		os.queueEvent("terminate")
		sleep(1)
	end
;;
