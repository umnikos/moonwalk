include stdlib.mw

:: move_recovery retry
	local current_fuel = turtle.getFuelLevel()
	if saved_fuel_level > current_fuel then
		get_word() -- skip
	end
;;	

:: save_fuel_level retry
	saved_fuel_level = turtle.getFuelLevel()
;;
:: forward_internal move_recovery
	turtle.forward()
;;
: forward save_fuel_level forward_internal ;
: up save_fuel_level up_internal ;
:: up_internal move_recovery
 turtle.up()
;;
: down save_fuel_level down_internal ;
:: down_internal move_recovery
 turtle.down()
;;


: turn_right save_rotation turn_right_internal ;
: save_rotation get_current_rotation save_rotation_internal ;
:: get_current_rotation retry
	local block_scanner = peripheral.find("plethora:scanner")
	if not block_scanner then
		error("COULDN'T FIND BLOCK SCANNER")
	end
	local results = block_scanner.scan()
	for i, block in ipairs(results) do
		if block.x == 0 and block.y == 0 and block.z == 0 then
			push(block.state.facing)
		end
	end
;;
:: save_rotation_internal retry
	saved_rotation = pop()
;;
: turn_recovery get_current_rotation turn_recovery_internal ;
:: turn_recovery_internal retry
	local new_rotation = pop()
	if new_rotation ~= saved_rotation then
		get_word()
	end
;;
:: turn_right_internal turn_recovery
	turtle.turnRight()
;;
: turn_left save_rotation turn_left_internal ;
:: turn_left_internal turn_recovery
 turtle.turnLeft()
;;

:: dig retry
 turtle.dig()
;;
:: dig_down retry
 turtle.digDown()
;;
:: dig_up retry
 turtle.digUp()
;;