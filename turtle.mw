include stdlib.mw

:: l pure
	push("left")
;;
:: r pure
	push("right")
;;
:: f pure
	push("forward")
;;
:: b pure
	push("back")
;;
:: u pure
	push("up")
;;
:: d pure
	push("down")
;;

:: $ pure
	dir_as_peripheral = {
		["up"] = "top",
		["down"] = "bottom",
		["left"] = "left",
		["right"] = "right",
		["forward"] = "front",
		["back"] = "back",
	}
;; $

:: moving_recovery retry
	local current_fuel = turtle.getFuelLevel()
	if saved_fuel_level > current_fuel then
		get_word() -- skip
		pop()
		set_success(true)
	end
;;
:: moving_check_preliminaries retry
	if turtle.getFuelLevel() == 0 then
		error("CANNOT MOVE WITH 0 FUEL")
	end
;;
: moving moving_check_preliminaries save_fuel_level moving_internal ;
:: save_fuel_level retry
	saved_fuel_level = turtle.getFuelLevel()
;;
:: moving_internal moving_recovery
	local direction = pop()
	local actions = {
		["forward"] = function() set_success(turtle.forward()) end,
		["back"] = function() set_success(turtle.back()) end,
		["up"] = function() set_success(turtle.up()) end,
		["down"] = function() set_success(turtle.down()) end,
	}
	actions[direction]()
;;
: move quote { moving } concat force_success ;

:: inspect retry
	local direction = pop()
	local functions = {
		["forward"] = turtle.inspect,
		["up"] = turtle.inspectUp,
		["down"] = turtle.inspectDown,
	}
	local a,b = functions[direction]()
	if a then push(b) else push(nil) end
;;
:: inspect_name retry
	local direction = pop()
	local functions = {
		["forward"] = turtle.inspect,
		["up"] = turtle.inspectUp,
		["down"] = turtle.inspectDown,
	}
	local a,b = functions[direction]()
	if a then push(b.name) else push("") end
;;

: save_rotation get_current_rotation save_rotation_internal ;
:: get_current_rotation retry
	local block_scanner = peripheral.find("plethora:scanner")
	if block_scanner then
		local results = block_scanner.scan()
		for i, block in ipairs(results) do
			if block.x == 0 and block.y == 0 and block.z == 0 then
				push(block.state.facing)
			end
		end
	else
		--error("COULDN'T FIND BLOCK SCANNER")
		unget_word("get_current_orientation_with_block")
	end
;;
" FIXME: this gets itself stuck if it inspects an unsuitable block, as it will not reinspect after that " del
: get_current_orientation_with_block selected # 16 select u place u inspect get_current_orientation_with_block_internal u dig swap select ;
:: get_current_orientation_with_block_internal retry
	local b = pop()
	local valid_directions = {["north"]=true,["east"]=true,["west"]=true,["south"]=true}
	if b and b.state and valid_directions[b.state.facing] then
		push(b.state.facing)
	else
		error("UNSUITABLE BLOCK FOR FIGURING OUT ORIENTATION")
	end
;;

:: save_rotation_internal retry
	saved_rotation = pop()
;;
: turning save_rotation turning_internal ;
: turning_recovery get_current_rotation turning_recovery_internal ;
:: turning_recovery_internal retry
	local new_rotation = pop()
	if new_rotation ~= saved_rotation then
		get_word()
		pop()
	end
;;
:: turning_internal turning_recovery 
	local direction = pop()
	local actions = {
		["left"] = function() set_success(turtle.turnLeft()) end,
		["right"] = function() set_success(turtle.turnRight()) end,
	}
	actions[direction]()
;;
: turn quote { turning } concat force_success ;

:: digging retry
	local direction = pop()
	local actions = {
		["forward"] = function() turtle.dig() set_success(not turtle.detect()) end,
		["up"] = function() turtle.digUp() set_success(not turtle.detectUp()) end,
		["down"] = function() turtle.digDown() set_success(not turtle.detectDown()) end,
	}
	actions[direction]()
;;
: dig quote { digging } concat force_success ;

: movedig dup moving success? { del } { dup dig movedig } ifelse ;
: digmove movedig ;

:: attacking retry
	local direction = pop()
	local actions = {
		["forward"] = function() set_success(turtle.attack()) end,
		["up"] = function() set_success(turtle.attackUp()) end,
		["down"] = function() set_success(turtle.attackDown()) end,
	}
	actions[direction]()
;;

:: detect retry
	local direction = pop()
	local actions = {
		["forward"] = function() push(turtle.detect()) end,
		["up"] = function() push(turtle.detectUp()) end,
		["down"] = function() push(turtle.detectDown()) end,
	}
	actions[direction]()
;;

:: selected retry
	push(turtle.getSelectedSlot())
;;

:: selecting retry
 local slot = pop()
 set_success(turtle.select(slot))
;;
: select quote { selecting } concat force_success ;

: placing save_held_item placing_internal ;
:: save_held_item retry
	saved_held_item = turtle.getItemDetail()
;;
:: placing_recovery retry
	local held_item = turtle.getItemDetail()
	local same_item = false
	if held_item == saved_held_item then
		same_item = true
	elseif held_item.name == saved_held_item.name and held_item.count == saved_held_item.count then
		same_item = true
	end
	if not same_item then
		get_word()
		pop()
		set_success(true)
	end
;;
:: placing_internal placing_recovery
	local direction = pop()
	local actions = {
		["forward"] = function() set_success(turtle.place()) end,
		["up"] = function() set_success(turtle.placeUp()) end,
		["down"] = function() set_success(turtle.placeDown()) end,
	}
	actions[direction]()
;;
: place quote { placing } concat force_success ;

:: item_count retry
	push(turtle.getItemCount())
;;
: count_items item_count ;

:: sucking_to_count retry
	local direction = pop()
	local wanted_count = pop()
	local count = turtle.getItemCount()
	if count < wanted_count then
		local actions = {
			["forward"] = function() turtle.suck(wanted_count - count) end,
			["up"] = function() turtle.suckUp(wanted_count - count) end,
			["down"] = function() turtle.suckDown(wanted_count - count) end,
		}
		actions[direction]()
	end
	set_success(turtle.getItemCount() == wanted_count)
;;
: suck_to_count { sucking_to_count } quote_concat quote_concat force_success ;

:: dropping retry
	local direction = pop()
	local actions = {
		["forward"] = function() turtle.drop() end,
		["up"] = function() turtle.dropUp() end,
		["down"] = function() turtle.dropDown() end,
	}
	actions[direction]()
	set_success(turtle.getItemCount() == 0)
;;
: drop quote { dropping } concat force_success ;

:: patrol_update_counters pure
 local block = pop()
 local x = pop()
 local y = pop()
 push(x)
 push(y-1)
 push(block)
;;
: patrol_body # 1 sub { dup call f move } swap times l turn dup call f move patrol_update_counters patrol ;
: patrol over dup # 0 = not { patrol_body } if ;

:: setting_echest retry
 local chest = peripheral.wrap(dir_as_peripheral[pop()])
 if not chest then
  pop()
  pop()
  pop()
  set_success(false)
  return
 end
 chest.setFrequency(2^pop(),2^pop(),2^pop())
 set_success(true)
;;

: set_echest { setting_echest } quote_concat quote_concat quote_concat quote_concat force_success ;
